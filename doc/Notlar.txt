15.11.2022

Java Eğitimi

Java Ders programı
Salı - Perşembe
Saat: 19:00 - 22:00


github'ta ders notları yedeklenecek.


1- Java Genel giriş 
2- Java özellikleri
3- Genel programlama pradigmaları
4- Sayı sistemleri
5- Bir java programı text sayafasına yazıp derleyip çalıştıracaz


HW1
-Assembly nedir neden var neden kullanımda hala?
-Unity ve Unreal Engine nedir ve diger oyun motorlarına inceleyelim.
-Interpereted programlama dili nedir?
-Garbage Collector Nedir nasıl çalışır?
-Memory leak
-Functional Programming, Prosedürel Programlama, Object Oriented Programming,
    Generic Programming, Imperative programming, Reflective programming, Concurrent
-Java programı derleme ve çalıştırma adımları
    JVM nedir 
    JRE nedir 
    JIT nedir 
    Byte code nedir 

    Bunlar hangi aşamalardan geçerken kullanılıyor?



ali olustur 
..
..

ali silindi progaramcı silmesin ben silerim G.C devereye giriyor 

C ve C++ da Garbage C. mekanizması yoktur. Programcı kendi siler kendi olsuturdugu nesneyi.


Programlama Dillerinin Sınıflandırılması

Programlama dillerini 3(üç) biçimde sınıflandırabiliriz:
1. Seviyelerine göre sınıflandırma

2. Kullanım alanlarına göre sınıflandırma

3. Programlama modeline göre sınıflandırma



Java programı derleme ve çalıştırma adımları





--------------------------------------------------------

HW2 

Stack ve Heap Nedir ?
Donanımsal karsılıkları?

Fonksiyonel programlama ile prosüdürel programlama arasındaki fark?
Imperative Programing?
Reflective programing?
Concurrent programing? 


--------------------------------------------------------
22.11.2022


HW3 
Github reopsu olusturmak kendi java norları için
Github'a kendini anlatan bilgi veren sade bir Overwiev olustur.
Google documentler den slaytları hazırlayalım

--------------------------------------------------------
/*******************************************************/
/*******************************************************/


Sayı Sistemleri 


2-8-10-16 temelde bu sayı sistemleri var 


2 lik sayı sistemi 

Neden kullanırız: tam sayı ve gerçek sayı sistemleri için kullanırız

4 66 76  -- 123,4 555.7


0101 1011 0001 1110 

ikilik  sayı sistemi işaretli ve işaretsiz olmak üzer iki gruba ayrılır 

işaretsiz - unsigned --> sayının pozitif oldgunu söyleer
işaretli -- signed ---> sayıların hem pozitif hem negatif olabiliceğini söyler 


Sistemlerin hemen hepsinde 

8 bitlik alana byte denilmektedir.

bit bit bit bit bit bit bit  bit
1   0   1    0   1   1   0   0  === byte 

bit = binary digit 
Byte = 8bit

Sistem programlamada daha küöçük birimler var 

4 bit = Nibble = yarım byte
8 bit = byte 
2 byte = word
4 byte = double word


Sayı sistemlerinde bazı işlemler

2'ye tümleyeni bulma konusu için pratik kurallar 

	0101  0100
	1010	 1100

sagdan baslayarak ilk 1 bitini gorene kadar 
bitlerin aynısını yazıyoruz
geri kalan kısmı ters ceviriyoruz
	

	0001  1000
     1110  1000    

---------------------
işaretli 2 lik sistem

sign bit --> sayının işaretni belirler
0 --> pozitif sayı
1 --> negatif sayı


işaretli sayı sistemlerinde 
Sistemlerin hemen hepsi negatif sayıyı gösterimi için
Sayının 2'ye tümleyini aritmatigi kullanır

aynı sayıınn pozitif ve negatif degerleri
sayının 2 ye tümlenyenleri

45
-45 gibi 

1110 1001 = -23
2^0 * 1 + 2^1 * 0 + 2^2 * 0 + 2^3 * 1 + 2^4 * 0 + 2^5 * 1 + + 2^6 * 1 + 2^7 * 1
0001 0111 = 23


Soru :  bir byte lık alanda -52 sayısını ifade edermisin

önce 52 degerinin bitlerini buluruz sonrada 2'ye tümelyeni buluruz. Eksili sayının 2 bitlik ifadesini 

0011 0100 = 52
1100 1100 = -52


---------------------------------------------
temel byte alanlarında yazılabilecek en buyuk ve en kucuk degerler 

unsigned sistemde

0  - 255
0  - 65535
0  - .....


signed sistemlerde

0111 1111 -- > 127 en buyuk tam sayı degeri 
1000 0001 ---> -127 - 1 = 128 en kucuk tam sayı degeri elde edilir 
1000 0000 --> -128


-128 127
-32768 - 32767
-2147483648  - 2147483647 

--------------------------------------------------------------

Soru: İşaretli 2 lik sayı sisteminde butun bitleri 1 olan sayı nedir

1111 1111 = -128 + 127 = -1
0000 0001 = 1 


--------------------------------------------------------------

16 LIK sayı sistemi 

hexadecimal sistem 
hex system denir 

16 tane sembol var

0123456789ABCDEF


Neden hex sistemi bizi ilgilendirir

aslında 2 lık sayı sisteminde 5 bitlik alanı tekbir yerde gosterebiliriz
ayrıca 16 lık sistem 2 nın katı olması işimizi kolaylaştırır



Soru: 2lık sayı sistemini 16 lık sayı sistemine cevirelim

1001  1110 1001 1111
  9    E    9    F

Soru:  1AC  onluk sayı sistemine donusturelim

1*16^2 + 10 * 16^1 + 12 * 16^0  = 256 + 160 + 12 = .....


-----------------------------------------------------------

Önce java gereksinimleri yuklenmeli işletim sistemine göre

Sonra 
Java ayarlarımızı consol'dan incelemeliyiz aynı versiyon olmalı  

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community>java -version
java version "17.0.1" 2021-10-19 LTS
Java(TM) SE Runtime Environment (build 17.0.1+12-LTS-39)
Java HotSpot(TM) 64-Bit Server VM (build 17.0.1+12-LTS-39, mixed mode, sharing)

C:\Program Files (x86)\Microsoft Visual Studio\2019\Community>javac -version
javac 17.0.1

-----------------------------------------------------------


Dil kavramı nedir?

Dil iletiişmde kullanılan semboller toplulugudur. Bir dilin kurallarına gramer denir.
Gramerin bir çok alanı vardır. En önemlileri "sentaks (syntax) " ve "semantik (semantic" dir.
Bir cümlenin olabilmesi için en azından sentaks ve semantiğe sahip olması gerekir.


Sentaks doğru yazma ve dogru dizilime ilişkin kurallardır.

		"I going to will fitness."

Java ornegi 

		System.out.println("Hello, World)";


Semantik: Dildeki dogru dizilmiş ögelerin ne anlama ifade ettiketlerine ilişkin kurallara da semantik denir.


Dipnot:
Bilgisayar Dilleri ve Programlama Dilleri: Bilgisayar bilimlerinde kullanılmak üzere tasarlanmış
dillere bilgisayar dilleri (computer langues) denir. Bir bilgisayar dilinde akış da varsa o zaman programalam dili
(programmin language) denir. Örnek: HTML, XML gibi bilgisayar dilleridir, programlama dili değildir.
C, C++, Java, C#, Swift..... gibi dillerde akış oldugunda programlama dilleridir. 


-----------------------------------------------------------

Hello World Program


package orhn;

class App{
    public static void main(String[] args) {
        System.out.println("Hello, World");    
    }
}


komutlar

-> javac orhn/App.java

-> java orhn.App


-----------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------

29.11.2022 Salı

Derleyici hata mesajları (diagnostics):

1. Gerçek hatalar (Error): Dilin sentaks ve semantik kurallarına uyulmamasından dolayı verilen mesajlardır.
	Bu durumda arakod(Byte code) üretilmez.

2. Uyarılar (warning): Byte kodun üretimine engel olmayan, olası programlama ve mantık hatalarının programcıya
	bildirilmesi içien verilen mesajlardır. Programcı bu uyarıları mutlaka dikkate almalıdır. Özel bir durum yoksa 
	uyarı mesajlarının oluşumuna yol açan kodlar düzeltilmelidir. Bazı duurmlarda derleyicinin uyarı mesajı verdiği ancak IDE'nin kullanıldıgı
	bir "static kod analizi araçları" konfigürasyonları gereği uyarı verebilirler. Şüphesiz bunlarda da dikkate alınmalıdır. Ancak bunların
	hepsi düzeltilmesi gerekmez.


3. Ölümcül hatalar (fatal errors): Derleme işleminin bile tamamlanmasını engelleyebilecek hatalardır. Bu durumda
	programcının yazdıgı kod açısından yapacak bir şeyi yoktur. Çünkü kod henüz derlememiştir. Programcının ölümcül hataya
	yol açan durumu ortadan kaldırmsı gerekir. Örneğin diskte yer kalmaması, derlenecek dosyanın bulunamaması gibi durumlar ölümcül hatalara örnek gösterilebilir.


Programın çalışma zamanı sırasında oluşan hatalara genel olarak "exception" denir. Exception oluştugunda program sonlanır. 
Bu durum detayları "exception işlemleri(exception handling)" konusunda ele alınacaktır. Excepiton yerine "run time error" da kullanılabilrmektedir. 
"error" denildiginde "compile time error" anlaşılır.
  

-----------------------------------------------------------

Java'da yorum satırları (comment lines)


Not: Yorum satırları kodun okunabilirliğini/algılanabilirliğini bozacak şekilde koda eklenmemelidir
	Yorum satırı eklemenin de bir "convetion"'u olmadır.

package orhn;

class App{

    //Burası derleyici tarafından dikkate alınmaz.
    public static void main(String[] args) {
        System.out.println("Hello, World");    

        /*
            Burası da 
            derleyici
            tarafından 
            dikkate alınmaz 
         */
    }
}

-----------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------

Atom (Token):
Bir programlama dilinde kendi başına anlamlı olan en küçük birime atom denir. Atomlar 6 gruba ayrılır.

1. Anahtar Sözcükler(keywords, reserved words): Dil için özel bir anlamı olan yeni dil tarafın bilinen ve 
	birçoğu doğrudan değişken ismi olarak kullanılamayan atomlardır. Örneğin: package, class, public, int, if, while vs.

2. Değişkenler (identifiers, variables): İsmini programcının belirlediği ve çeşitli kurallara göre isminin berlirlenebildiği atomlardır.
	Örneğin: App, String, System, orhn vs...

3. Operatörler (Operators): Bir işleme yol açan ve bu işlem sonucunda bir değer üreten atomlardır.
	Örneğin: a + b ifadesinde + bir operatordür

4. Sabitler (Literals, constants): Program içerisine doğrudan yazılan sayılara denir. Örneğin: a - 5 ifadesinde
	5 bir sabittir. 

5. String'ler (Strings, String Literals): iki tırnak (double quote) içersinde bulunan yazılar tırnaklarla birlikte string atomudur.
	Bu atoma string sabiti anlamında "string literal" da denir. Örneğin: "Hello, World"

6. Ayraçlar (delimiters, punctuators): Yukarıdaki gruplar dışında kaln tüm atomlara denir. Örneğin: {}, (), [] vs.

-----------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------

Programı atomlarına parçalayalım


package orhn;

class App{
    public static void main(String[] args) {
        System.out.println("Hello, World");    
    }
}

package 		->  anahtar sözcük
orhn			-> değişken
class		-> anahtar sözcük
App			-> değişken
{}			-> ayraç
public		-> anahtar sözcük
static		-> anahtar sözcük
void 		-> anahtar sözcük
main			-> metod ismi değişken
()			-> ayıraç
String		-> değişken
[]			-> ayıraç 
args			-> değişken
{}			-> ayıraç
System		-> değişken
.			-> operator
out			-> değişken
println		-> değişken
()			-> metod çagırma operatoru
"Hello, World" -> String literals
;			-> Ayıraç


-----------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------

Boşluk karakterleri (whitespaces): Klavyeden basılıgında bosluk algısı veren karakterlerdir.
	Klavyeden basılan bosluk karakterleri tipik olarak sunlardır: space, tab, enter 

-----------------------------------------------------------
-----------------------------------------------------------

	Java programlama dilinde kod yazım kuralları şunlardır:
	1. Atomlar arasında istenildiği kadar boşluk (whitespace) bırakılabilir.
	2. Anahtar sözcükler ve değişkenler dışında kalan atomlar istenildiği kadar bitişik yazılabilir. 
		Anahtar sözcükler ve değişken atomlar arasında en az bir boşluk (whitespace) karateri olmalıdır.


-----------------------------------------------------------
-----------------------------------------------------------

Atomlar arasında istenildiği kadar boşluk (whitespace) bırakılabilir.


package 



orhn;

class 







App{

    public static void main(String[


    ] 
    
    args) 
    
    {
        System.             out.            println("Hello, World");    

    }
}


-----------------------------------------------------------
-----------------------------------------------------------

2. Anahtar sözcükler ve değişkenler dışında kalan atomlar istenildiği kadar bitişik yazılabilir. 
		


package orhn;class App{public static void main(String[]args){System.out.println("Hello, World");}}


-----------------------------------------------------------
-----------------------------------------------------------

Anahtar sözcükler ve değişken atomlar arasında en az bir boşluk (whitespace) karateri olmalıdır.

package orhn;class App{publicstatic void main(String[]args){System.out.println("Hello, World");}}


-----------------------------------------------------------
-----------------------------------------------------------

Not: Java'da derleme zamanı (compile time) ve çalışma zamanı (run time) denilen birbiriyle ilişkili
	ancak ayrı olan iki kavram vardır. Derleme zamanı derleme sürecinde yapılan işlemlere denir. 
	Çalışma zamanı programın çalışma sürecinde yapılan işlemlere denir.

-----------------------------------------------------------
-----------------------------------------------------------

Bildirim (declaration): Bildirim bir ismin derleyiciye tanıtılmasıdır. 
				    Derleyici bildirim ile o ismin ne anlama deldiğini anlar ve derleme işlemini ona göre yapar.


-----------------------------------------------------------
-----------------------------------------------------------

Bir java programı genel olarak paketlerden, paketler sınıflardan, sınıflarda metodlardan oluşur.

package <isim>;
Örnek:
package orhn;


class <isim> {


}

Örnek:

class Sample{
	//...
}


class Mample{
	//...
}





-----------------------------------------------------------
-----------------------------------------------------------
Metod bildirimlerin genel biçimi:

Java'da alt programlara metot (method) denir. Alt programın ne yapacağının yazılmasına "metot bildirimi (metot declaration)" denir.
Alt programın kodlarının çalıştırılmasına ise "metot çağırma (method call)" denir. Metot bildirimini genel biçimi:

[erişim belirleyici] [static/non-static] <geri dönüş değeri bilgisi> <metot ismi>([parametreler])
{
	//...
	//...

}

Açıklamalar:

-Erişim belirlemeleri şunlardan biri olabilir: public, protected, private, no-modifier(hiçbir şey yazılmaması)
	Metotların erişim berlirleyicileri konusuna gelene kadar tüm metodları public olarak bildirecez.

- Bir metot static veya non-static olabilir. static anahtar sözcüğü bildirimde yazılmasa metot non-static olur.
	non-static metotlara ilişkin konuya gelene kadar tüm metotları static olarak bildirecez.

- Metodun geri dönüş değeri bilgisi metot isminden önce yazılmalıdır. Metodun geri dönüş değerinin olmaması durumuda
	void yazılması demektir. Geri dönüş degerı kavramı da ileride ele alınacaktır.
- Metodun ismi bir değişken atomdur. Tğm değişken atomlarda oldugu gibi "değişken isimlendirme kuralları"na uygun 
	olarak isimlendirilmelidir.
-Metot bildirimlerinde motot isminden sonra parantezler içerisinde ismine "parametre (parameter)" deniken değişkenler bildirilebilir.
	Metot parametre değişkenleri ileride ele alınacaktır.
- Metot bildiriminde küme paratezleri arasında (metot gövdesi) metodun kodları yazılır 


static bir metodun çağrılmasının genel biçimi:

[paket ismi].[sınıf ismi].<metot ismi>([argümanlar]);


Bir program main metodunun çağrılmasıyla çalışmaya başlar. Programcının main metodu içerisinde çağırdığı motolar ve o metotların içerisinde çağrılan motolarla
akış devam eder. main metodu JVM tarafından çağrılır. Bu anlamda java programına verilen "byte code"'a ilişkin sınıfın main metoduna "giriş noktası (entry point)"
denir. Özel bazı özel durumlar dışında (bu özel durumlar vardı - extrem konularda karsımıza cıkar) main metodu sonlandıgında program sonlanır.
Bir metot çağrıldıgında akış metodun kodlarına dallanır (call) ve metodun kodları çalıştırılır. Şüphesiz metot içerisinde başka bir metot çağrılıyor olabilir.
Yine bu çapırma n0oktasında akıl metodun kodlarına dallanır. Metot çağrısı sonlandıgında akış metodun çağrıldıgı noktaya geri döner ve bir sonraki koddan akış 
çalışmaya devam eder.

Not: System.out.println("Hello World"); çağrısında System bir sınıf, out bir referans ve println de non-static bir metotdur.
	Bu kavramları ileride ele alacagız.

-----------------------------------------------------------
-----------------------------------------------------------

package orhn;

class App{
    public static void main(String[] args) {
        System.out.println("Hello, World");    
        orhn.Sample.foo();
        orhn.Sample.bar();
        orhn.Mample.tar();
        System.out.println("Goodbye, World");
    }
}

class Sample{
    public static void foo()
    {
        System.out.println("Sample.foo");
        orhn.Mample.tar();
    }

    public static void bar()
    {
        System.out.println("Sample.bar");
    }
}


class Mample {
    public static void tar()
    {
        System.out.println("Mample.tar");
    }
}


-----------------------------------------------------------
-----------------------------------------------------------

Çağıran metodun (caller) ait oldugu sınıf ile çağıran metot (callee) ait oldugu sınıf 
aynı paket içerisindeyse çağırma sırasında paket ismi yazılmayabilir

package orhn;

class App{
    public static void main(String[] args) {
        System.out.println("Hello, World");    
        Sample.foo();
        Sample.bar();
        Mample.tar();
        System.out.println("Goodbye, World");
    }
}

class Sample{
    public static void foo()
    {
        System.out.println("Sample.foo");
        Mample.tar();
    }

    public static void bar()
    {
        System.out.println("Sample.bar");
    }
}


class Mample {
    public static void tar()
    {
        System.out.println("Mample.tar");
    }
}
-----------------------------------------------------------
-----------------------------------------------------------
Çağıran metot ile çağrılan metot aynı sınfta ise bu durumda çağırma sırasında paket ismi yazılmamışsa sınıf 
ismide yazılmayabilir.

package orhn;

class App{
    public static void main(String[] args) {
        System.out.println("Hello, World");    
        Sample.foo();
        Sample.bar();
        Mample.tar();
        System.out.println("Goodbye, World");
    }
}

class Sample{
    public static void foo()
    {
        System.out.println("Sample.foo");
        Mample.tar();
    }

    public static void bar()
    {
        System.out.println("Sample.bar");
        foo();
    }
}


class Mample {
    public static void tar()
    {
        System.out.println("Mample.tar");
    }
}


-----------------------------------------------------------
-----------------------------------------------------------
01.12.2022 Perşembe

IDE (Integrated Development Environment): Derleyiciler komut satırından çalıştırlabilen basit bir arayüze sahip
programlardır. Aslında teorik olarak java ile geliştirilecek bir uygulma içerisinde tüm java dosyları "notepad"
basit bir editor ile yazılıp, komut satırından derlenebilir. Fakat pratikte bu şekilde program yazman fazlaca 
zaman kaybettirir. Yazılım geliştirmeyi kolaylaştırmak için IDE debilen programlar kullanılır.
IDE'ler içerisinde editorler, test araçları, çeşitli kodlar üreten araçlar vs. bulunur. IDE bir derleyici değildir.
IDE derleme işlemi için derleyiciyi de çalıştırabilir. Uygulamayı çalıştırma işlemi için de yineJRE içerisindeki araçları 
kullanabilir. Java ile uygulma geliştirirken kullanılabilecek çeşitli IDE'ler bulunmaktadır. Bunlardan en yaygın 
kullanılanları "Eclipse" ve "IntelliJ IDEA" IDE'leridir. Önceleri Netbeans isminde bir IDE kullanılmaktaydı. 
Ancak Netbeans kullanımı oldukça azalmıştır.

-----------------------------------------------------------
-----------------------------------------------------------
Tür (type): Bir değişken için bellekte kaç byte ayrılacağını ve içerisindeki hangi
yöntemle veri tutulacagını belirten kavramdır.

Java'da türler genel olarak iki gruba ayrılabilir.
Temel türler (primitive/built*in/predefined types).
Programcının tanımladığı türler (user defined types).


Temel türler

Tür ismi			Uzunluğu(byte)
short				2
int					4
long				8
byte				1                           0 0 0 0  0 1 0 1  --> 5    ------- -128/127

float				4
double				8

char				2
boolean				-


-Java da türlerin uzunlukları boolean türü dışında sistemden sisteme değişmez.

-Tüm tam sayı türleri işaretlidir(signed)

-Tamsayı türleri (integer/integral types) için ikiye tümleme yöntemi kullanılır. Java'da işaretsiz tam sayı türleri yoktur.
Ancak java 8 ile birlikte belirli koşullar altında işaretsiz tamsayı işlemleri yapılabilmektedir.

-long türü en uzun tamsayı türüdür.

-Gerçek sayı(real/floating point types) için "IEEE 754 standardı" kullanılır. float ve double türleri sırasıyla
tek hassasiyetli (single precision) ve çift hassasiyetli (double precision) değerleri tutmaktadır. Bu türlerde bazı sayılar
tam olarak ifade edilemezler 0 sayıya yakın bir sayı ile ifade edilebilirler. Bir noktalı sayının ifade edilemeyip en yakın
sayı olarak ifade edilmesine yuvarlama hatası (rounding error) denir. Yuvarlama hataları değer ilk kez yerleştirilirken
de oluşabilir, bir işemin sonucunda da oluşabilir.


-Gerçek sayı türleri işaretli türlerdir.

-float türünün yuvarlama hatalarına karşı direnci zayıfır. Yanı yuvarlama hatası daha çok olmaktadır.

-Yuvarlama hataları parasal ve finansal uygulamarda hatalı değerlerin oluşmasına sebep olabilir. Sırf parasal
ve finansal uygulamalar için tasarlanmış özel türler (sınıflar) bulunur. Programcı böylesi uygulamalar için bu sınıfı
tercih eder. Ancak bu sınıflar yuvarlama hatası yapmamak için yüzlerce makine komutu ile bu işlemleri yapar.
Bu durumda programcı için parasal ve finansal uygulamalar gibi yuvarlama hatasının olmaması gerekn uygulamalar dışında double
yada durma göre float türü tercih edilmelidir.


-char türü Java'da UNICODE tablo dikkate alınarak belirlenmiştir. Bu nedenle char türü 2 byte'dır. char türünden 
değişken içerisinde bir karakterin UNICODE tablosu (ya da başka tablodaki) sıra numarası tutulur. UNICODE tablo
dünyadaki dillerde kullanılan hemen hemen tüm karakterleri ve bazı özel karakterleri ifade edebilme yeteneğine sahiptir.


-Yazılar içerisinde her bir karakter aslında bir sayı ile temsil edilir. Hangi karakterin hangi sayı ile ifade edildiği
karater tablosuna bağlıdır. ASCII tablosu 1 byte'lık yani 256 tane satırdan oluşur. UNICODE tablo 2 byte'lık
yani 65536 satırdan oluşan bir tablodur. Karakter tablolları bunlarla sınırlı değildir.


-boolean türünün alabileceği iki tane değer vardır: true, false. boolean türünün uzunluğu "Java Language Specification"'da
belirtilememiştir. Sistemden sisteme değişebilir. Ancak bu değişim programcı açısından problem oluşturmaz.

Not: int türüne "integer" demek yanlış bir terim kullanamk demektir. integer terimi tamsayılar için
kullanılan genel bir terimdir. Ayrıca "Integer" isimli bir sınıf da bulunmaktadır.

Not: Java'da en çok kullanılan tamsayı türü int türüdür. en çok kullanılan gerçek sayı türü de double türüdür.
Programcı öncelikle bu türleri tercih etmelidir. Eğer geçerli bir nedeni varsa diğer türleri kullanabilir.

-----------------------------------------------------------
-----------------------------------------------------------
HW3

IEEE 754 standardı nedir? 
Gerçek sayılar bu standarda göre nasıl ifade edilir?

1344.3454 ---> bunun sistemde nasıl ifade edildiği 
		   veya javada nasıl ifade edildiğini ögrenecez


-----------------------------------------------------------
-----------------------------------------------------------
/*
 * Aşağıdaki yuvarlama hatası örneği inceleyelim.  
 * İleride detaylı olarak ele alınacak
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
		double a = 0.1, b = 0.2;
		double c;
		
		c = a + b;
		
		if(c == 0.3)
			System.out.println("Eşit");
		else
			System.out.println("Eşit değil");
		
		System.out.printf("a = %.20f\n", a);
		System.out.printf("b = %.20f\n", b);
		System.out.printf("c = %.20f\n", c);
	}
}



-----------------------------------------------------------
-----------------------------------------------------------
/*
 * Aşağıdaki yuvarlama hatası örneği inceleyelim.  
 * İleride detaylı olarak ele alınacak
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
		float a = 0.1F, b = 0.2F;
		float c;
		
		c = a + b;
		
		if(c == 0.3)
			System.out.println("Eşit");
		else
			System.out.println("Eşit değil");
		
		System.out.printf("a = %.20f\n", a);
		System.out.printf("b = %.20f\n", b);
		System.out.printf("c = %.20f\n", c);
	}
}

-----------------------------------------------------------
-----------------------------------------------------------
Bir değişken kullanılmadan önce bildirilmelidir:
Değişken bildiriminin genel biçimi:
<tür> <değişken ismi>;

örnek:

int a;
float b;
boolean c;

-----------------------------------------------------------
-----------------------------------------------------------
Java'da 3 çeşit değişken vardır:
1. Yerel değişkenler (local variables)
2. Parametre değişkenleri (Parameter variables)
3. Sınıf veri elemanları (class member variables)


Değişkenler için temel kavramlar:
İsim(name): Belli kurallara göre yazılan karakterler topluluğudur.

Tür (type): Değişken için bellekte ne kadar yer ayrılacağı ve içerisinde değerlerin hangi yönteme göre tutulacağını belirtir.

Faaliyet alanı (scope): Bir değişken isminin derleyici tarafından görülebildiği kod aralığıdır. Derleme zamanına işilkindir.

Ömür (storage duration): Bir değişkenin bellekte kalma süresidir. Çalışma zamanına ilişkindir.

Temel bazı kavramlar:
Blok (block): Bir metot içerisinde { ile } arasında kalan kod bölümüdür. Metodun gövdesi de bir bloktur.

İlkdeğer verme (initialization): Bir değişkene bildirim noktasında verieln değer denir. 

-----------------------------------------------------------
-----------------------------------------------------------

/*
 * Bir metot içerisinde istenildiği kadar ayrı veya iç içe bloklar olabilir
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
		{
			//...
			
			{
				//..
			}
		}
		
		{
			//...
		}
	}
}

-----------------------------------------------------------
-----------------------------------------------------------
/*
 * Bir blok içerisinde herhangi bir yerde bildirilen değişkenlere yerel değişkenler (local variables) denir.
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
		int a;
		
		{
			//...
			
			{
				double b;
				int c;
				//..
			}
		}
		
		{
			float d;
			//...
		}
	}
}

class Sample{
	public static void foo()
	{
		int x;
		
		//..
		{
			//..
			boolean f;
			//..
		}
		
	}
}


-----------------------------------------------------------
-----------------------------------------------------------
/*
 * Aynı türden yerel değişkenler aralarında virgül konarak bildirilebilirler
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
		int a, b, c;
		double x, y, z;
	}
}

class Sample{
	public static void foo()
	{
		int x, y, z;
	}
}

-----------------------------------------------------------
-----------------------------------------------------------
/*
 * Yerel değişkenlere ilkdeğer verme
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
		int a = 10; //ilk deger verme
		double pi = 3.14; //ilk degerveme sentaksı
	}
}

class Sample{
	public static void foo()
	{
		int x = 10, y = 30, z;
		
		z = 33;//initizlization değil.... 
	}
}




-----------------------------------------------------------
-----------------------------------------------------------

/*
 * Yerel bir değikenin faaliyet alanı bildirildği yerden bildirilği bloğun sonuna kadardır
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
	}
}

class Sample{
	public static void foo()
	{
		{
			int x;
			
			x = 20;
			
			//..
			
			{
				x = 45;
			}
		}
		
		x = 15; //error
		
	}
}

-----------------------------------------------------------
-----------------------------------------------------------
/*
 * Aynı faaliyet alanı içerisinde aynı isimde yerel değişken bildirimi geçersizdir
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
	}
}

class Sample{
	public static void foo()
	{
		int a;
		double a; //error
		//..
	}
	
	public static void bar() 
	{
		int a;
		
		{
			double a; //error
			//..
			
		}
	}
}

-----------------------------------------------------------
-----------------------------------------------------------

/*
 * Farklı faaliyet alanı içerisinde aynı isimde yerel değişken bildirimi geçerlidir
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
	}
}

class Sample{
	public static void foo()
	{
		{
			int x = 10;
			//..
		}
		
		{
			int x = 20;
			//..
		}
		
		int x = 30;
		
		//..
	}	
}




-----------------------------------------------------------
-----------------------------------------------------------

/*
 * Java'da değer verilmemiş hiçbir değiken kullanılamaz. Yani içerisindeki değer işleme sokulamaz
 * Yerel değişkenlere değer verilmesi programcının sorumluluğundadır
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
		int a;
		int b;
		
		b = a * 2; //error
		
	}
}

class Sample{
	public static void foo()
	{
	}	
}



-----------------------------------------------------------
-----------------------------------------------------------

/*
 * print ve println metotları değişkenlerin içerisindeki değerleri ekrana basarlar
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
		int a = 10;
		
		System.out.print(a); //ekrana yazdırır
		System.out.println(a); //--> print("") sonrada alt satıra geçiririm 
		
	}
}

class Sample{
	public static void foo()
	{
	}	
}




-----------------------------------------------------------
-----------------------------------------------------------

/*
 * Değişken isimleri sayısal bir karakter ile başlamaz
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
		int 1number; //error
		
	}
}



-----------------------------------------------------------
-----------------------------------------------------------
/*
 * Değişken isimleri herhangi bir uygun karakter ile başlatılıp istenildği kadar sayısal karater içerebilir
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
		int a12345 = 10; 
		
		System.out.println(a12345);
		
	}
}

-----------------------------------------------------------
-----------------------------------------------------------

/*
 * Değişken isimlendirmede UNICODE alfabetik karakterler kullanabiliir. Örneğin türkçe karakter geçerlidir ,
 * 
 * Not: Her ne kadar değişken isimlendirmede UNICODE karakterler kullanılabildse de programlamada yalnızca
 * İngilizce alfabetik 26 karakterin kullanılması iyi bir tekniktir. Biz de bu "convention"' a uygun kodlar yazacağız.
 * 
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
		int öğrencisayısı = 10; 
		
		System.out.println(öğrencisayısı);
		
	}
}

-----------------------------------------------------------
-----------------------------------------------------------
/*
 * Değişken isimlendirmede boşluk (whitespace) karakterleri geçersizdir
 * 
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
		int number Of Students = 10; 
		
		System.out.println(number Of Students);
		
	}
}




-----------------------------------------------------------
-----------------------------------------------------------
/*
 * Değişken isimleri büyük-küçük harf duyarlıdır (case-sensitive)
 * 
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
		int val, Val, VaL, VAL; //geçerli  
		
		
	}
}



-----------------------------------------------------------
-----------------------------------------------------------

/*
 * Değişken isimlendirmede  _(underscore/ alttire) karakteri kullamabilir. Hatta değişken ismi _ karateri ile başalatılabilir.
 *
 * 
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
		int _11 = 20;
		int _val = 22;
		int number_of_students = 11;
		
		System.out.println(_11);
		System.out.println(_val);
		System.out.println(number_of_students);
		
		
	}
}




-----------------------------------------------------------
-----------------------------------------------------------

/*
 * Java 9 ile birlikte alttire karaterinin tek başına değişken ismi olarak kullanıması geçersizdir. 
 * Java 8 ile birlikte "deprecated" olmuştur.
 * 
 * 
 * Not: Programlamda "artık kullanılması tavsiye edilmeyen" durumlar için "deprecated" terimi kullanılır.
 * Bu durum gerekçeleri farklı farklı olabilir. Programcı açısından genel olarak "deprecated" olan bir durum özel bir takım
 * nedenler yoksa tercih edilmemelidir.
 */

package orhn;

import java.nio.file.FileSystem;

public class App {
	public static void main(String [] args)
	{
		int _ = 10; //error
		
		System.out.println(_);
						
	}
}

-----------------------------------------------------------
-----------------------------------------------------------

/*
 * Java'da değişken isimlendirme $ karakteri kullanılabilir. Hatta isimler $ karakteri ile başlayabilir. $ karakteri
 * tek başına değişken ismi olabilir. Ancak programcı açısından değişken isimlendire $ karakteri kullanılmamalıdır.
 * Derleyici ismini kendisinin belirlediği durumlarda isimlendirmede bu karateri kullanır. $ karakteri bu anlamada
 * programcı tarafından kullanılırsa iism çakışması olabilir. Zaten $ karaterinin varlık sabebi de bu
 * tip kod üretimlerinde kulllanılmasıdır.
 */

package orhn;

import java.nio.file.FileSystem;

public class App {
	public static void main(String [] args)
	{
		int amountOf$s = 1000;
		int $ = 35;
		double $123 = 123;
		
		System.out.println(amountOf$s);
		System.out.println($);
		System.out.println($123);
		
						
	}
}

-----------------------------------------------------------
-----------------------------------------------------------
/*
 * Anahatar sözcükler tek başına değişken ismi olarak kullanılamaz. Ancak Java'ya daha sonra eklenmiş yerine göre
 * anahtar sözcük biçiminde kullanılan bazı atomlar vardır. Bu tarz eklenen sözcükler tam anlamıyla anahtar sözcük değildir.
 * Kullanıldığı yere göre değişken ismi olup olmadığı derleyici tarafından tespit edilir (inference, deduction). 
 * Bu tarz sözcüklere programlamada "bağlamsal anahtar sözcük (contextual keywords") de denir.
 
 
 	Not: Değişken isimlerinin kolay telaffuz edilebilir, anlamlı ve yeterince uzunlukta olması gerekir.
 	
 */

package orhn;

import java.nio.file.FileSystem;

public class App {
	public static void main(String [] args)
	{
		//int double; //error
		//double package; //error
		
		var a = 10;
		
		int var = 20;
		
		System.out.println(var);
		System.out.println(a);
						
	}
}

-----------------------------------------------------------
-----------------------------------------------------------

/*
 * Not: Klavyeden temel türden degerler okuma yöntemlerinin tam anlamı ileride detaylı olarak ele
 * alınacak. Bu sebeple bunları bir kalıp olarak görüp yalnıca kalyeden okuma kısmı ile ilgilenecez.
 * 
 * 
 * Klavyeden int türden değer okunması kalıbı
 * 
 */

package orhn;

public class App {
	public static void main(String [] args)
	{
		java.util.Scanner kb = new java.util.Scanner(System.in);
		
		System.out.print("Bir sayi giriniz:");
		int val = Integer.parseInt(kb.nextLine());
		
		int result = val * val;
		
		System.out.println(result);
		
	}
}




-----------------------------------------------------------
-----------------------------------------------------------




-----------------------------------------------------------
-----------------------------------------------------------





-----------------------------------------------------------
-----------------------------------------------------------



-----------------------------------------------------------
-----------------------------------------------------------




-----------------------------------------------------------
-----------------------------------------------------------



-----------------------------------------------------------
-----------------------------------------------------------




-----------------------------------------------------------
-----------------------------------------------------------




-----------------------------------------------------------
-----------------------------------------------------------




-----------------------------------------------------------
-----------------------------------------------------------




-----------------------------------------------------------
-----------------------------------------------------------



-----------------------------------------------------------
-----------------------------------------------------------




-----------------------------------------------------------
-----------------------------------------------------------



-----------------------------------------------------------
-----------------------------------------------------------



-----------------------------------------------------------
-----------------------------------------------------------







